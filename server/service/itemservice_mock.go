// Code generated by MockGen. DO NOT EDIT.
// Source: itemservice.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/dliakhov/bloxroutelabs/client-server-app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockItemService is a mock of ItemService interface.
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService.
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance.
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// ProcessItemCommand mocks base method.
func (m *MockItemService) ProcessItemCommand(ctx context.Context, command *models.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessItemCommand", ctx, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessItemCommand indicates an expected call of ProcessItemCommand.
func (mr *MockItemServiceMockRecorder) ProcessItemCommand(ctx, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessItemCommand", reflect.TypeOf((*MockItemService)(nil).ProcessItemCommand), ctx, command)
}
